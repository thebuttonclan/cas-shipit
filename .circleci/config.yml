version: 2.1
orbs:
  ruby: circleci/ruby@0.1.2 
  aws-ecr: circleci/aws-ecr@6.12.2
  aws-cli: circleci/aws-cli@1.3.0
  kube-orb: circleci/kubernetes@0.11.1

jobs:
  tools:
      docker:  
        - image: cimg/base:2020.01
      steps:
        - checkout
        - run:
            name: Install python dependencies
            command: |
              sudo apt-get update
              sudo apt-get -y install --no-install-recommends make build-essential libssl-dev zlib1g-dev libbz2-dev libreadline-dev libsqlite3-dev wget curl llvm libncurses5-dev xz-utils tk-dev libxml2-dev libxmlsec1-dev libffi-dev liblzma-dev
        - restore_cache:
            name: Restore asdf Tools Cache
            keys:
              - tool-versions-{{ checksum ".tool-versions" }}-v2
        - run:
            name: Install asdf
            command: |
              [ ! -f ".tool-versions" ] && echo "file .tool-versions was not found" && exit 1
              [ -d ~/.asdf ] || git clone https://github.com/asdf-vm/asdf.git ~/.asdf --branch v0.7.4
              echo 'source ~/.asdf/asdf.sh' >> $BASH_ENV
        - run:
            name: Install asdf tools
            command: |
              asdf install
              asdf reshim
              pip install pre-commit
        - save_cache:
            name: Save asdf Tools Cache
            key: tool-versions-{{ checksum ".tool-versions" }}-v2
            paths:
              - ~/.asdf
        - persist_to_workspace:
            root: ~/
            paths:
              - .asdf
              - .bashrc
              - cas-shipit
  lint:
    docker:  
        - image: cimg/base:2020.01
    steps:
        - checkout
        - attach_workspace:
            at: ~/
        - run:
            name: Install dependencies
            command: |
              sudo apt-get update
              sudo apt-get -y install zlib1g-dev libpq-dev
        - restore_cache:
            name: Restore gems
            keys:
              - gem-cache-v2-{{ checksum "Gemfile.lock" }}
        - run:
            name: Run pre-commit
            command: |
              source ~/.asdf/asdf.sh 
              asdf global postgres 11.4
              asdf reshim 
              gem install bundler:2.1.4
              bundle install
              pre-commit
        - save_cache:
            name: Save gems
            key: gem-cache-v2-{{ checksum "Gemfile.lock" }}
            paths:
              - gem environment gemdir
  push-heroku:
    docker:
      - image: circleci/ruby:2.6.3-stretch-node
    executor: ruby/default
    steps:
      - checkout
      - run:
          name: Publish to Heroku Server
          command: |
            rm -rf .git
            rm .gitignore
            rm -f config/credentials.yml.enc
            mv config/credentials-prod.yml.enc config/credentials.yml.enc
            git init
            git config user.email "$USER_EMAIL"
            git config user.name "$USER_NAME"
            git add .
            git commit -m "CircleCI Pipeline"
            git push -f https://heroku:$HEROKU_API_KEY@git.heroku.com/$HEROKU_APP.git master
  update-helm-chart:
    executor: aws-cli/default
    steps:
      - checkout
      - attach_workspace:
          at: ~/
      - aws-cli/setup:
          aws-access-key-id: ACCESS_KEY_ID
          aws-region: AWS_REGION
          aws-secret-access-key: SECRET_ACCESS_KEY
      - kube-orb/install-kubectl
      - run:
          name: Update helm chart
          command: |
            source ~/.asdf/asdf.sh
            asdf reshim
            aws eks --region $AWS_REGION update-kubeconfig --name $AWS_CLUSTER_NAME
            helm upgrade --install shipit ./shipit-helm -n test --set master_key=$RAILS_MASTER_KEY --set image_tag=$(echo $CIRCLE_SHA1 | cut -c -7) --set repoUrl=$AWS_ECR_ACCOUNT_URL
      
workflows:
  version: 2
  pipeline:
    jobs:
      - update-helm-chart:
          requires:
            - tools
            - aws-ecr/build-and-push-image
          # filters:
          #   branches:
          #     only:
          #       - develop
      - tools
      # - lint:
      #     requires:
      #       - tools
      - aws-ecr/build-and-push-image:
          account-url: AWS_ECR_ACCOUNT_URL
          aws-access-key-id: ACCESS_KEY_ID
          aws-secret-access-key: SECRET_ACCESS_KEY
          create-repo: false
          no-output-timeout: 20m
          region: AWS_REGION
          repo: shipit-images
          skip-when-tags-exist: true
          tag: $(echo $CIRCLE_SHA1 | cut -c -7)
          requires:
            - lint
          # filters:
          #   branches:
          #     only:
          #       - develop
      # - push-heroku:
      #     requires:
      #       - lint
      #     filters:
      #       branches:
      #         only:
      #           - develop
